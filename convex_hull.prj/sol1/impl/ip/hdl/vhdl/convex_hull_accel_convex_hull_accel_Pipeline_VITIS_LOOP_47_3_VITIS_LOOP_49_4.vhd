-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convex_hull_accel_convex_hull_accel_Pipeline_VITIS_LOOP_47_3_VITIS_LOOP_49_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_img_data_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_img_data_empty_n : IN STD_LOGIC;
    in_img_data_read : OUT STD_LOGIC;
    bound : IN STD_LOGIC_VECTOR (15 downto 0);
    empty : IN STD_LOGIC_VECTOR (7 downto 0);
    pts_y_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_y_3_ce0 : OUT STD_LOGIC;
    pts_y_3_we0 : OUT STD_LOGIC;
    pts_y_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_y_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_y_2_ce0 : OUT STD_LOGIC;
    pts_y_2_we0 : OUT STD_LOGIC;
    pts_y_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_y_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_y_1_ce0 : OUT STD_LOGIC;
    pts_y_1_we0 : OUT STD_LOGIC;
    pts_y_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_y_ce0 : OUT STD_LOGIC;
    pts_y_we0 : OUT STD_LOGIC;
    pts_y_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_x_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_x_3_ce0 : OUT STD_LOGIC;
    pts_x_3_we0 : OUT STD_LOGIC;
    pts_x_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_x_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_x_2_ce0 : OUT STD_LOGIC;
    pts_x_2_we0 : OUT STD_LOGIC;
    pts_x_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_x_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_x_1_ce0 : OUT STD_LOGIC;
    pts_x_1_we0 : OUT STD_LOGIC;
    pts_x_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    pts_x_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    pts_x_ce0 : OUT STD_LOGIC;
    pts_x_we0 : OUT STD_LOGIC;
    pts_x_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    count_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    count_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of convex_hull_accel_convex_hull_accel_Pipeline_VITIS_LOOP_47_3_VITIS_LOOP_49_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv26_1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln47_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln47_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_img_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln47_reg_439_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_443 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln49_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln53_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_88 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal c_1_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_92 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln47_1_fu_308_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten9_fu_96 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln47_fu_262_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten9_load : STD_LOGIC_VECTOR (15 downto 0);
    signal count_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal count_3_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln49_fu_332_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln49_1_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln49_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln47_1_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln47_fu_294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_336_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_358_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal icmp_ln53_1_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_451 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component convex_hull_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component convex_hull_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    c_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_fu_88 <= ap_const_lv8_0;
                elsif (((icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    c_fu_88 <= c_1_fu_390_p2;
                end if;
            end if; 
        end if;
    end process;

    count_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    count_fu_100 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_condition_451)) then 
                    count_fu_100 <= count_3_fu_379_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten9_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln47_fu_256_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten9_fu_96 <= add_ln47_fu_262_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten9_fu_96 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    r_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    r_fu_92 <= ap_const_lv8_0;
                elsif (((icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    r_fu_92 <= select_ln47_1_fu_308_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln47_reg_439 <= icmp_ln47_fu_256_p2;
                icmp_ln47_reg_439_pp0_iter1_reg <= icmp_ln47_reg_439;
                icmp_ln53_reg_443 <= icmp_ln53_fu_273_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln47_1_fu_302_p2 <= std_logic_vector(unsigned(r_fu_92) + unsigned(ap_const_lv8_1));
    add_ln47_fu_262_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten9_load) + unsigned(ap_const_lv16_1));
    and_ln53_fu_374_p2 <= (icmp_ln53_reg_443 and icmp_ln53_1_fu_368_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_img_data_empty_n, icmp_ln47_reg_439)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln47_reg_439 = ap_const_lv1_0) and (in_img_data_empty_n = ap_const_logic_0));
    end process;


    ap_condition_451_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2)
    begin
                ap_condition_451 <= ((ap_const_lv1_1 = and_ln53_fu_374_p2) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln47_fu_256_p2)
    begin
        if (((icmp_ln47_fu_256_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten9_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten9_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten9_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten9_load <= indvar_flatten9_fu_96;
        end if; 
    end process;

    c_1_fu_390_p2 <= std_logic_vector(unsigned(select_ln47_fu_294_p3) + unsigned(ap_const_lv8_1));
    count_3_fu_379_p2 <= std_logic_vector(unsigned(count_fu_100) + unsigned(ap_const_lv32_1));
    count_out <= count_fu_100;

    count_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_1))) then 
            count_out_ap_vld <= ap_const_logic_1;
        else 
            count_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln47_fu_256_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten9_load = bound) else "0";
    icmp_ln49_fu_289_p2 <= "1" when (c_fu_88 = empty) else "0";
    icmp_ln53_1_fu_368_p2 <= "1" when (signed(tmp_1_fu_358_p4) < signed(ap_const_lv26_1)) else "0";
    icmp_ln53_fu_273_p2 <= "0" when (in_img_data_dout = ap_const_lv8_0) else "1";

    in_img_data_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_img_data_empty_n, icmp_ln47_reg_439, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln47_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_img_data_blk_n <= in_img_data_empty_n;
        else 
            in_img_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_img_data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln47_reg_439, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln47_reg_439 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_img_data_read <= ap_const_logic_1;
        else 
            in_img_data_read <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_336_p4 <= count_fu_100(5 downto 2);
    pts_x_1_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_x_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_1_ce0 <= ap_const_logic_1;
        else 
            pts_x_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_1_d0 <= zext_ln49_1_fu_324_p1;

    pts_x_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_1) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_1_we0 <= ap_const_logic_1;
        else 
            pts_x_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_2_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_x_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_2_ce0 <= ap_const_logic_1;
        else 
            pts_x_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_2_d0 <= zext_ln49_1_fu_324_p1;

    pts_x_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_2) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_2_we0 <= ap_const_logic_1;
        else 
            pts_x_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_3_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_x_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_3_ce0 <= ap_const_logic_1;
        else 
            pts_x_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_3_d0 <= zext_ln49_1_fu_324_p1;

    pts_x_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_3) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_3_we0 <= ap_const_logic_1;
        else 
            pts_x_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_x_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_ce0 <= ap_const_logic_1;
        else 
            pts_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_x_d0 <= zext_ln49_1_fu_324_p1;

    pts_x_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_0) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_x_we0 <= ap_const_logic_1;
        else 
            pts_x_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_1_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_y_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_1_ce0 <= ap_const_logic_1;
        else 
            pts_y_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_1_d0 <= zext_ln47_fu_316_p1;

    pts_y_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_1) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_1_we0 <= ap_const_logic_1;
        else 
            pts_y_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_2_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_y_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_2_ce0 <= ap_const_logic_1;
        else 
            pts_y_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_2_d0 <= zext_ln47_fu_316_p1;

    pts_y_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_2) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_2_we0 <= ap_const_logic_1;
        else 
            pts_y_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_3_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_y_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_3_ce0 <= ap_const_logic_1;
        else 
            pts_y_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_3_d0 <= zext_ln47_fu_316_p1;

    pts_y_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_3) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_3_we0 <= ap_const_logic_1;
        else 
            pts_y_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_address0 <= zext_ln49_fu_346_p1(4 - 1 downto 0);

    pts_y_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_ce0 <= ap_const_logic_1;
        else 
            pts_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pts_y_d0 <= zext_ln47_fu_316_p1;

    pts_y_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln47_reg_439_pp0_iter1_reg, and_ln53_fu_374_p2, trunc_ln49_fu_332_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln53_fu_374_p2) and (trunc_ln49_fu_332_p1 = ap_const_lv2_0) and (icmp_ln47_reg_439_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            pts_y_we0 <= ap_const_logic_1;
        else 
            pts_y_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln47_1_fu_308_p3 <= 
        add_ln47_1_fu_302_p2 when (icmp_ln49_fu_289_p2(0) = '1') else 
        r_fu_92;
    select_ln47_fu_294_p3 <= 
        ap_const_lv8_0 when (icmp_ln49_fu_289_p2(0) = '1') else 
        c_fu_88;
    tmp_1_fu_358_p4 <= count_fu_100(31 downto 6);
    trunc_ln49_fu_332_p1 <= count_fu_100(2 - 1 downto 0);
    zext_ln47_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_1_fu_308_p3),32));
    zext_ln49_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_fu_294_p3),32));
    zext_ln49_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_336_p4),64));
end behav;
