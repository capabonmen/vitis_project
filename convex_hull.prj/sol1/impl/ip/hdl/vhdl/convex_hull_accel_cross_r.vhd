-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convex_hull_accel_cross_r is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    a_x_val : IN STD_LOGIC_VECTOR (31 downto 0);
    a_y_val : IN STD_LOGIC_VECTOR (31 downto 0);
    b_x_val : IN STD_LOGIC_VECTOR (31 downto 0);
    b_y_val : IN STD_LOGIC_VECTOR (31 downto 0);
    c_x_val : IN STD_LOGIC_VECTOR (31 downto 0);
    c_y_val : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of convex_hull_accel_cross_r is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal sub_ln8_fu_58_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln8_reg_86 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln8_1_fu_64_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln8_1_reg_91 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln8_2_fu_70_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln8_2_reg_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln8_3_fu_76_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln8_3_reg_101 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_50_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln8_reg_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_54_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln8_1_reg_111 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_50_ce : STD_LOGIC;
    signal grp_fu_54_ce : STD_LOGIC;
    signal sub_ln8_4_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ce_reg : STD_LOGIC;
    signal a_x_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_y_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_x_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal b_y_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal c_x_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal c_y_val_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component convex_hull_accel_mul_32s_32s_32_2_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_2_0_U17 : component convex_hull_accel_mul_32s_32s_32_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln8_1_reg_91,
        din1 => sub_ln8_reg_86,
        ce => grp_fu_50_ce,
        dout => grp_fu_50_p2);

    mul_32s_32s_32_2_0_U18 : component convex_hull_accel_mul_32s_32s_32_2_0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln8_3_reg_101,
        din1 => sub_ln8_2_reg_96,
        ce => grp_fu_54_ce,
        dout => grp_fu_54_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                a_x_val_int_reg <= a_x_val;
                a_y_val_int_reg <= a_y_val;
                b_x_val_int_reg <= b_x_val;
                b_y_val_int_reg <= b_y_val;
                c_x_val_int_reg <= c_x_val;
                c_y_val_int_reg <= c_y_val;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= sub_ln8_4_fu_82_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then
                mul_ln8_1_reg_111 <= grp_fu_54_p2;
                mul_ln8_reg_106 <= grp_fu_50_p2;
                sub_ln8_1_reg_91 <= sub_ln8_1_fu_64_p2;
                sub_ln8_2_reg_96 <= sub_ln8_2_fu_70_p2;
                sub_ln8_3_reg_101 <= sub_ln8_3_fu_76_p2;
                sub_ln8_reg_86 <= sub_ln8_fu_58_p2;
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(sub_ln8_4_fu_82_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= sub_ln8_4_fu_82_p2;
        else 
            ap_return <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_50_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_50_ce <= ap_const_logic_1;
        else 
            grp_fu_50_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_54_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_54_ce <= ap_const_logic_1;
        else 
            grp_fu_54_ce <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln8_1_fu_64_p2 <= std_logic_vector(unsigned(c_y_val_int_reg) - unsigned(a_y_val_int_reg));
    sub_ln8_2_fu_70_p2 <= std_logic_vector(unsigned(b_y_val_int_reg) - unsigned(a_y_val_int_reg));
    sub_ln8_3_fu_76_p2 <= std_logic_vector(unsigned(c_x_val_int_reg) - unsigned(a_x_val_int_reg));
    sub_ln8_4_fu_82_p2 <= std_logic_vector(unsigned(mul_ln8_reg_106) - unsigned(mul_ln8_1_reg_111));
    sub_ln8_fu_58_p2 <= std_logic_vector(unsigned(b_x_val_int_reg) - unsigned(a_x_val_int_reg));
end behav;
