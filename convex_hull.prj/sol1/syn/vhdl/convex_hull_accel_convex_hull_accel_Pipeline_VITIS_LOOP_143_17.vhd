-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convex_hull_accel_convex_hull_accel_Pipeline_VITIS_LOOP_143_17 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_img_data_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_img_data_full_n : IN STD_LOGIC;
    out_img_data_write : OUT STD_LOGIC;
    hs : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_x_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_x_ce0 : OUT STD_LOGIC;
    hull_x_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_x_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_x_1_ce0 : OUT STD_LOGIC;
    hull_x_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_x_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_x_2_ce0 : OUT STD_LOGIC;
    hull_x_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_x_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_x_3_ce0 : OUT STD_LOGIC;
    hull_x_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_y_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_y_ce0 : OUT STD_LOGIC;
    hull_y_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_y_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_y_1_ce0 : OUT STD_LOGIC;
    hull_y_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_y_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_y_2_ce0 : OUT STD_LOGIC;
    hull_y_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    hull_y_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    hull_y_3_ce0 : OUT STD_LOGIC;
    hull_y_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convex_hull_accel_convex_hull_accel_Pipeline_VITIS_LOOP_143_17 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal and_ln147_1_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln143_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal out_img_data_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln143_fu_244_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln143_reg_380 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_x_fu_275_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_x_reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_fu_298_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln147_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_reg_436 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_1_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln147_1_reg_441 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln143_1_fu_258_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_86 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln143_fu_238_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln143_fu_228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln9_fu_248_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_x_fu_275_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_y_fu_298_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln147_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_335_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal p_x_fu_275_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_x_fu_275_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_x_fu_275_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_x_fu_275_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_fu_298_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_fu_298_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_fu_298_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_y_fu_298_p7 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component convex_hull_accel_sparsemux_9_2_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (1 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convex_hull_accel_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_9_2_32_1_1_U71 : component convex_hull_accel_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => hull_x_q0,
        din1 => hull_x_1_q0,
        din2 => hull_x_2_q0,
        din3 => hull_x_3_q0,
        def => p_x_fu_275_p9,
        sel => trunc_ln143_reg_380,
        dout => p_x_fu_275_p11);

    sparsemux_9_2_32_1_1_U72 : component convex_hull_accel_sparsemux_9_2_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 32,
        CASE1 => "01",
        din1_WIDTH => 32,
        CASE2 => "10",
        din2_WIDTH => 32,
        CASE3 => "11",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => hull_y_q0,
        din1 => hull_y_1_q0,
        din2 => hull_y_2_q0,
        din3 => hull_y_3_q0,
        def => p_y_fu_298_p9,
        sel => trunc_ln143_reg_380,
        dout => p_y_fu_298_p11);

    flow_control_loop_pipe_sequential_init_U : component convex_hull_accel_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln143_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_86 <= add_ln143_fu_238_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_86 <= ap_const_lv31_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln147_1_reg_446 <= and_ln147_1_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln147_1_reg_441 <= icmp_ln147_1_fu_326_p2;
                icmp_ln147_reg_436 <= icmp_ln147_fu_321_p2;
                p_x_reg_426 <= p_x_fu_275_p11;
                p_y_reg_431 <= p_y_fu_298_p11;
                trunc_ln143_reg_380 <= trunc_ln143_fu_244_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln143_fu_238_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv31_1));
    and_ln147_1_fu_353_p2 <= (xor_ln147_fu_343_p2 and and_ln147_fu_349_p2);
    and_ln147_fu_349_p2 <= (icmp_ln147_reg_436 and icmp_ln147_1_reg_441);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_state4_pp0_stage0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage0_iter3));
    end process;


    ap_block_state4_pp0_stage0_iter3_assign_proc : process(out_img_data_full_n, and_ln147_1_reg_446)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((ap_const_lv1_1 = and_ln147_1_reg_446) and (out_img_data_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln143_fu_232_p2)
    begin
        if (((icmp_ln143_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_86, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv31_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_86;
        end if; 
    end process;

    hull_x_1_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_x_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_x_1_ce0 <= ap_const_logic_1;
        else 
            hull_x_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_x_2_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_x_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_x_2_ce0 <= ap_const_logic_1;
        else 
            hull_x_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_x_3_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_x_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_x_3_ce0 <= ap_const_logic_1;
        else 
            hull_x_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_x_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_x_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_x_ce0 <= ap_const_logic_1;
        else 
            hull_x_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_y_1_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_y_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_y_1_ce0 <= ap_const_logic_1;
        else 
            hull_y_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_y_2_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_y_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_y_2_ce0 <= ap_const_logic_1;
        else 
            hull_y_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_y_3_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_y_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_y_3_ce0 <= ap_const_logic_1;
        else 
            hull_y_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hull_y_address0 <= zext_ln143_1_fu_258_p1(4 - 1 downto 0);

    hull_y_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hull_y_ce0 <= ap_const_logic_1;
        else 
            hull_y_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln143_fu_232_p2 <= "1" when (signed(zext_ln143_fu_228_p1) < signed(hs)) else "0";
    icmp_ln147_1_fu_326_p2 <= "1" when (signed(p_y_fu_298_p11) < signed(rows)) else "0";
    icmp_ln147_fu_321_p2 <= "1" when (signed(p_x_fu_275_p11) < signed(cols)) else "0";
    lshr_ln9_fu_248_p4 <= ap_sig_allocacmp_i_1(5 downto 2);
    or_ln147_fu_331_p2 <= (p_y_reg_431 or p_x_reg_426);

    out_img_data_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, out_img_data_full_n, and_ln147_1_reg_446, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_lv1_1 = and_ln147_1_reg_446) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_img_data_blk_n <= out_img_data_full_n;
        else 
            out_img_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_img_data_din <= ap_const_lv8_FF;

    out_img_data_write_assign_proc : process(ap_enable_reg_pp0_iter3, and_ln147_1_reg_446, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv1_1 = and_ln147_1_reg_446) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_img_data_write <= ap_const_logic_1;
        else 
            out_img_data_write <= ap_const_logic_0;
        end if; 
    end process;

    p_x_fu_275_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    p_y_fu_298_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_fu_335_p3 <= or_ln147_fu_331_p2(31 downto 31);
    trunc_ln143_fu_244_p1 <= ap_sig_allocacmp_i_1(2 - 1 downto 0);
    xor_ln147_fu_343_p2 <= (tmp_fu_335_p3 xor ap_const_lv1_1);
    zext_ln143_1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln9_fu_248_p4),64));
    zext_ln143_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),32));
end behav;
