// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convex_hull_accel_convex_hull_accel_Pipeline_VITIS_LOOP_143_17 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_img_data_din,
        out_img_data_full_n,
        out_img_data_write,
        hs,
        hull_x_address0,
        hull_x_ce0,
        hull_x_q0,
        hull_x_1_address0,
        hull_x_1_ce0,
        hull_x_1_q0,
        hull_x_2_address0,
        hull_x_2_ce0,
        hull_x_2_q0,
        hull_x_3_address0,
        hull_x_3_ce0,
        hull_x_3_q0,
        hull_y_address0,
        hull_y_ce0,
        hull_y_q0,
        hull_y_1_address0,
        hull_y_1_ce0,
        hull_y_1_q0,
        hull_y_2_address0,
        hull_y_2_ce0,
        hull_y_2_q0,
        hull_y_3_address0,
        hull_y_3_ce0,
        hull_y_3_q0,
        cols,
        rows
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] out_img_data_din;
input   out_img_data_full_n;
output   out_img_data_write;
input  [31:0] hs;
output  [3:0] hull_x_address0;
output   hull_x_ce0;
input  [31:0] hull_x_q0;
output  [3:0] hull_x_1_address0;
output   hull_x_1_ce0;
input  [31:0] hull_x_1_q0;
output  [3:0] hull_x_2_address0;
output   hull_x_2_ce0;
input  [31:0] hull_x_2_q0;
output  [3:0] hull_x_3_address0;
output   hull_x_3_ce0;
input  [31:0] hull_x_3_q0;
output  [3:0] hull_y_address0;
output   hull_y_ce0;
input  [31:0] hull_y_q0;
output  [3:0] hull_y_1_address0;
output   hull_y_1_ce0;
input  [31:0] hull_y_1_q0;
output  [3:0] hull_y_2_address0;
output   hull_y_2_ce0;
input  [31:0] hull_y_2_q0;
output  [3:0] hull_y_3_address0;
output   hull_y_3_ce0;
input  [31:0] hull_y_3_q0;
input  [31:0] cols;
input  [31:0] rows;

reg ap_idle;
reg out_img_data_write;
reg hull_x_ce0;
reg hull_x_1_ce0;
reg hull_x_2_ce0;
reg hull_x_3_ce0;
reg hull_y_ce0;
reg hull_y_1_ce0;
reg hull_y_2_ce0;
reg hull_y_3_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg   [0:0] and_ln147_1_reg_446;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln143_fu_232_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    out_img_data_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] trunc_ln143_fu_244_p1;
reg   [1:0] trunc_ln143_reg_380;
wire   [31:0] p_x_fu_275_p11;
reg   [31:0] p_x_reg_426;
wire   [31:0] p_y_fu_298_p11;
reg   [31:0] p_y_reg_431;
wire   [0:0] icmp_ln147_fu_321_p2;
reg   [0:0] icmp_ln147_reg_436;
wire   [0:0] icmp_ln147_1_fu_326_p2;
reg   [0:0] icmp_ln147_1_reg_441;
wire   [0:0] and_ln147_1_fu_353_p2;
wire   [63:0] zext_ln143_1_fu_258_p1;
reg   [30:0] i_fu_86;
wire   [30:0] add_ln143_fu_238_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln143_fu_228_p1;
wire   [3:0] lshr_ln9_fu_248_p4;
wire   [31:0] p_x_fu_275_p9;
wire   [31:0] p_y_fu_298_p9;
wire   [31:0] or_ln147_fu_331_p2;
wire   [0:0] tmp_fu_335_p3;
wire   [0:0] and_ln147_fu_349_p2;
wire   [0:0] xor_ln147_fu_343_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [1:0] p_x_fu_275_p1;
wire   [1:0] p_x_fu_275_p3;
wire  signed [1:0] p_x_fu_275_p5;
wire  signed [1:0] p_x_fu_275_p7;
wire   [1:0] p_y_fu_298_p1;
wire   [1:0] p_y_fu_298_p3;
wire  signed [1:0] p_y_fu_298_p5;
wire  signed [1:0] p_y_fu_298_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 i_fu_86 = 31'd0;
#0 ap_done_reg = 1'b0;
end

convex_hull_accel_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U71(
    .din0(hull_x_q0),
    .din1(hull_x_1_q0),
    .din2(hull_x_2_q0),
    .din3(hull_x_3_q0),
    .def(p_x_fu_275_p9),
    .sel(trunc_ln143_reg_380),
    .dout(p_x_fu_275_p11)
);

convex_hull_accel_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U72(
    .din0(hull_y_q0),
    .din1(hull_y_1_q0),
    .din2(hull_y_2_q0),
    .din3(hull_y_3_q0),
    .def(p_y_fu_298_p9),
    .sel(trunc_ln143_reg_380),
    .dout(p_y_fu_298_p11)
);

convex_hull_accel_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln143_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_86 <= add_ln143_fu_238_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_86 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln147_1_reg_446 <= and_ln147_1_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln147_1_reg_441 <= icmp_ln147_1_fu_326_p2;
        icmp_ln147_reg_436 <= icmp_ln147_fu_321_p2;
        p_x_reg_426 <= p_x_fu_275_p11;
        p_y_reg_431 <= p_y_fu_298_p11;
        trunc_ln143_reg_380 <= trunc_ln143_fu_244_p1;
    end
end

always @ (*) begin
    if (((icmp_ln143_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_x_1_ce0 = 1'b1;
    end else begin
        hull_x_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_x_2_ce0 = 1'b1;
    end else begin
        hull_x_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_x_3_ce0 = 1'b1;
    end else begin
        hull_x_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_x_ce0 = 1'b1;
    end else begin
        hull_x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_y_1_ce0 = 1'b1;
    end else begin
        hull_y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_y_2_ce0 = 1'b1;
    end else begin
        hull_y_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_y_3_ce0 = 1'b1;
    end else begin
        hull_y_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hull_y_ce0 = 1'b1;
    end else begin
        hull_y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'd1 == and_ln147_1_reg_446) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_img_data_blk_n = out_img_data_full_n;
    end else begin
        out_img_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == and_ln147_1_reg_446) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_img_data_write = 1'b1;
    end else begin
        out_img_data_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln143_fu_238_p2 = (ap_sig_allocacmp_i_1 + 31'd1);

assign and_ln147_1_fu_353_p2 = (xor_ln147_fu_343_p2 & and_ln147_fu_349_p2);

assign and_ln147_fu_349_p2 = (icmp_ln147_reg_436 & icmp_ln147_1_reg_441);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((1'd1 == and_ln147_1_reg_446) & (out_img_data_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign hull_x_1_address0 = zext_ln143_1_fu_258_p1;

assign hull_x_2_address0 = zext_ln143_1_fu_258_p1;

assign hull_x_3_address0 = zext_ln143_1_fu_258_p1;

assign hull_x_address0 = zext_ln143_1_fu_258_p1;

assign hull_y_1_address0 = zext_ln143_1_fu_258_p1;

assign hull_y_2_address0 = zext_ln143_1_fu_258_p1;

assign hull_y_3_address0 = zext_ln143_1_fu_258_p1;

assign hull_y_address0 = zext_ln143_1_fu_258_p1;

assign icmp_ln143_fu_232_p2 = (($signed(zext_ln143_fu_228_p1) < $signed(hs)) ? 1'b1 : 1'b0);

assign icmp_ln147_1_fu_326_p2 = (($signed(p_y_fu_298_p11) < $signed(rows)) ? 1'b1 : 1'b0);

assign icmp_ln147_fu_321_p2 = (($signed(p_x_fu_275_p11) < $signed(cols)) ? 1'b1 : 1'b0);

assign lshr_ln9_fu_248_p4 = {{ap_sig_allocacmp_i_1[5:2]}};

assign or_ln147_fu_331_p2 = (p_y_reg_431 | p_x_reg_426);

assign out_img_data_din = 8'd255;

assign p_x_fu_275_p9 = 'bx;

assign p_y_fu_298_p9 = 'bx;

assign tmp_fu_335_p3 = or_ln147_fu_331_p2[32'd31];

assign trunc_ln143_fu_244_p1 = ap_sig_allocacmp_i_1[1:0];

assign xor_ln147_fu_343_p2 = (tmp_fu_335_p3 ^ 1'd1);

assign zext_ln143_1_fu_258_p1 = lshr_ln9_fu_248_p4;

assign zext_ln143_fu_228_p1 = ap_sig_allocacmp_i_1;

endmodule //convex_hull_accel_convex_hull_accel_Pipeline_VITIS_LOOP_143_17
