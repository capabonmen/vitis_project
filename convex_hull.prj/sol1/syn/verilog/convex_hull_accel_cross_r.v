// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convex_hull_accel_cross_r (
        ap_clk,
        ap_rst,
        a_x_val,
        a_y_val,
        b_x_val,
        b_y_val,
        c_x_val,
        c_y_val,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] a_x_val;
input  [31:0] a_y_val;
input  [31:0] b_x_val;
input  [31:0] b_y_val;
input  [31:0] c_x_val;
input  [31:0] c_y_val;
output  [31:0] ap_return;
input   ap_ce;

reg[31:0] ap_return;

wire  signed [31:0] sub_ln8_fu_58_p2;
reg  signed [31:0] sub_ln8_reg_86;
wire    ap_block_pp0_stage0_11001;
wire  signed [31:0] sub_ln8_1_fu_64_p2;
reg  signed [31:0] sub_ln8_1_reg_91;
wire  signed [31:0] sub_ln8_2_fu_70_p2;
reg  signed [31:0] sub_ln8_2_reg_96;
wire  signed [31:0] sub_ln8_3_fu_76_p2;
reg  signed [31:0] sub_ln8_3_reg_101;
wire   [31:0] grp_fu_50_p2;
reg   [31:0] mul_ln8_reg_106;
wire   [31:0] grp_fu_54_p2;
reg   [31:0] mul_ln8_1_reg_111;
wire    ap_block_pp0_stage0;
reg    grp_fu_50_ce;
reg    grp_fu_54_ce;
wire   [31:0] sub_ln8_4_fu_82_p2;
reg    ap_ce_reg;
reg   [31:0] a_x_val_int_reg;
reg   [31:0] a_y_val_int_reg;
reg   [31:0] b_x_val_int_reg;
reg   [31:0] b_y_val_int_reg;
reg   [31:0] c_x_val_int_reg;
reg   [31:0] c_y_val_int_reg;
reg   [31:0] ap_return_int_reg;

convex_hull_accel_mul_32s_32s_32_2_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_0_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln8_1_reg_91),
    .din1(sub_ln8_reg_86),
    .ce(grp_fu_50_ce),
    .dout(grp_fu_50_p2)
);

convex_hull_accel_mul_32s_32s_32_2_0 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_0_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln8_3_reg_101),
    .din1(sub_ln8_2_reg_96),
    .ce(grp_fu_54_ce),
    .dout(grp_fu_54_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        a_x_val_int_reg <= a_x_val;
        a_y_val_int_reg <= a_y_val;
        b_x_val_int_reg <= b_x_val;
        b_y_val_int_reg <= b_y_val;
        c_x_val_int_reg <= c_x_val;
        c_y_val_int_reg <= c_y_val;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_int_reg <= sub_ln8_4_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        mul_ln8_1_reg_111 <= grp_fu_54_p2;
        mul_ln8_reg_106 <= grp_fu_50_p2;
        sub_ln8_1_reg_91 <= sub_ln8_1_fu_64_p2;
        sub_ln8_2_reg_96 <= sub_ln8_2_fu_70_p2;
        sub_ln8_3_reg_101 <= sub_ln8_3_fu_76_p2;
        sub_ln8_reg_86 <= sub_ln8_fu_58_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return = ap_return_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return = sub_ln8_4_fu_82_p2;
    end else begin
        ap_return = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_50_ce = 1'b1;
    end else begin
        grp_fu_50_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_54_ce = 1'b1;
    end else begin
        grp_fu_54_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign sub_ln8_1_fu_64_p2 = (c_y_val_int_reg - a_y_val_int_reg);

assign sub_ln8_2_fu_70_p2 = (b_y_val_int_reg - a_y_val_int_reg);

assign sub_ln8_3_fu_76_p2 = (c_x_val_int_reg - a_x_val_int_reg);

assign sub_ln8_4_fu_82_p2 = (mul_ln8_reg_106 - mul_ln8_1_reg_111);

assign sub_ln8_fu_58_p2 = (b_x_val_int_reg - a_x_val_int_reg);

endmodule //convex_hull_accel_cross_r
